/*
    This file is part of mjwm.
    Copyright (C) 2014  Chirantan Mitra <chirantan.mitra@gmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
#include <dirent.h>
#include <getopt.h>

#include "stringx.h"
#include "vectorx.h"
#include "messages.h"
#include "application_directories.h"
#include "icon_service.h"
#include "jwm/menu.h"

static std::vector<std::string> default_directories_to_search()
{
	char *raw_xdg_data_dirs = std::getenv("XDG_DATA_DIRS");
	std::string xdg_data_dirs;
	if (raw_xdg_data_dirs == NULL) {
		xdg_data_dirs = "/usr/local/share:/usr/share";
	} else {
		xdg_data_dirs = raw_xdg_data_dirs;
	}

	char *raw_xdg_data_home = std::getenv("XDG_DATA_HOME");
	std::string xdg_data_home;
	if (raw_xdg_data_home == NULL) {
		char *home = std::getenv("HOME");
		xdg_data_home = home == NULL ? "" : std::string(home) + "/.local/share/applications";
	} else {
		xdg_data_home = raw_xdg_data_home;
	}

	std::string xdg_directories = std::string(xdg_data_dirs) + std::string(":") + std::string(xdg_data_home);
	std::vector<std::string> directories = amm::stringx(xdg_directories).split(":");

	std::vector<std::string> application_directories;
	for (std::vector<std::string>::iterator iter = directories.begin(); iter != directories.end(); ++iter) {
		std::string application_directory = amm::stringx(*iter).terminate_with("/") + "applications";

		DIR *directory = opendir(application_directory.c_str());
		if (directory) {
			application_directories.push_back(application_directory);
			closedir(directory);
		}
	}

	return application_directories;
}

int main(int argc, char *argv[])
{
	std::string output_filename("./automenu");
	std::string icon_extension("");
	std::vector<std::string> directories_to_search = default_directories_to_search();

	const char* short_options = "o:i:s:avh";
	const option long_options[] =
	{
		{"output-file",     required_argument, 0, 'o'},
		{"input-directory", required_argument, 0, 'i'},
		{"append-png",      no_argument,       0, 'a'},
		{"version",         no_argument,       0, 'v'},
		{"help",            no_argument,       0, 'h'},
		{0, 0, 0, 0}
	};

	int chosen_option;
	int option_index = 0;

	while ((chosen_option = getopt_long(argc, argv, short_options, long_options, &option_index)) != -1) {
		switch (chosen_option) {
			case 'o':
				output_filename = optarg;
				break;

			case 'i':
				directories_to_search = amm::stringx(optarg).split(":");
				break;

			case 's':
				std::cerr << "Deprecated option: use -i instead." << std::endl << "Proceeding..." << std::endl;
				directories_to_search = amm::stringx(optarg).split(":");
				break;

			case 'a':
				icon_extension = ".png";
				break;

			case 'v':
				std::cout << amm::messages::version();
				return 0;

			case 'h':
				std::cout << amm::messages::help();
				return 0;

			case '?':
				std::cerr << amm::messages::option_error();
				return 1;

			default:
				std::cerr << amm::messages::option_error();
				return 1;
		}
	}

	amm::application_directories application_directories(directories_to_search);
	std::vector<std::string> desktop_files = application_directories.desktop_file_names();
	std::vector<std::string> bad_paths = application_directories.bad_paths();
	if (bad_paths.size() > 0) {
		std::cerr << "These paths couldn't be opened: " << amm::vectorx(bad_paths).join(" ");
		std::cerr << std::endl << "Proceeding..." << std::endl;
	}

	amm::icon_service icon_service;
	icon_service.register_extension(icon_extension);

	amm::jwm::menu jwm_menu(desktop_files, icon_service);
	jwm_menu.populate();
	if (jwm_menu.total_parsed_files() == 0) {
		std::cerr << amm::messages::no_valid_desktop_files() << std::endl;
		return 1;
	}
	jwm_menu.sort();

	std::ofstream file(output_filename.c_str());
	file << amm::messages::autogenerated_by_amm();
	file << jwm_menu;
	file.close();

	std::cout << amm::messages::summary(
		desktop_files.size(),
		jwm_menu.total_parsed_files(),
		jwm_menu.total_unclassified_parsed_files(),
		jwm_menu.unparsed_file_names()
	);

	return 0;
}
